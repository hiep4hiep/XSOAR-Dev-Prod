args:
- default: true
  description: The IP to check
  name: ip
  required: true
comment: Try to get the hostname correlated with the input IP.
commonfields:
  id: IPToHost
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 5.0.0
    itemVersion: 1.6.8
    packID: CommonScripts
    packPropagationLabels:
    - all
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python:2.7.18.24066
engineinfo: {}
mainengineinfo: {}
name: IPToHost
outputs:
- contextPath: Endpoint
  description: The endpoint object.
- contextPath: Endpoint.Hostname
  description: The endpoint hostname.
  type: string
- contextPath: Endpoint.IP
  description: The endpoint IP.
  type: string
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  import socket

  ip = demisto.args().get('ip')

  try:
      host_info = socket.gethostbyaddr(ip)
  except Exception as e:
      demisto.results({
          "Type" : entryTypes["error"],
          "ContentsFormat" : formats["text"],
          "Contents" : "Couln't get the ip host info. Error information: \"{0}\"".format(str(e))
      })
      sys.exit(0)

  if not host_info:
      demisto.results({
          "Type" : entryTypes["error"],
          "ContentsFormat" : formats["text"],
          "Contents" : "Received an error while trying to get the host information"
      })
      sys.exit(0)

  hostname = host_info[0]

  output = {
      "Hostname" : str(hostname),
      "IP" : ip
  }

  context = {}
  context["Endpoint(val.Hostname && val.Hostname === obj.Hostname)"] = output

  md = tableToMarkdown("IP to Host", [output])

  demisto.results({
      'Type' : entryTypes['note'],
      'Contents': context,
      'ContentsFormat' : formats['json'],
      'HumanReadable': md,
      'ReadableContentsFormat' : formats['markdown'],
      'EntryContext' : context
  })
scripttarget: 0
subtype: python2
system: true
tags: []
type: python
