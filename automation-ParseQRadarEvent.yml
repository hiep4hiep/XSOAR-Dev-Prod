args:
- description: QRadar payload to parse
  name: payload
  required: true
comment: The script can parse QRadar Event payload to dict and save to context
commonfields:
  id: ParseQRadarEvent
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
enabled: true
engineinfo: {}
mainengineinfo: {}
name: ParseQRadarEvent
outputs:
- contextPath: QRadar.Event.Payload
  description: Payload data
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |2-




  from typing import Dict, Any
  import traceback


  ''' STANDALONE FUNCTION '''

  def get_key(pair: str):
    key = pair[0:pair.find(":")]
    return key

  def get_value(pair: str):
    value = pair[pair.find(":")+2:len(pair)]
    return value


  ''' COMMAND FUNCTION '''


  # TODO: REMOVE the following dummy command function
  def parser(payload_list):
    payload_dict = {}
    for data in payload_list:
      k = get_key(data)
      if " " in k:
          k = k.replace(" ","_")
      payload_dict[k] = get_value(data)

    payload_md = tableToMarkdown("Malware Information", payload_dict)
    payload_dict["md"] = payload_md
    return CommandResults(
      outputs_prefix='QRadar.Event.Payload',
      outputs_key_field='',
      outputs=payload_dict,
      )

  ''' MAIN FUNCTION '''

  def main():
      payload = demisto.args().get("payload")
      if "," in payload:
          payload_list = payload.split(",")
          payload_list.pop(0)
          try:
              # TODO: replace the invoked command function with yours
              return_results(parser(payload_list))
          except Exception as ex:
              demisto.error(traceback.format_exc())  # print the traceback
              return_error(f'Failed to execute ParseQRadarEvent. Error: {str(ex)}')
      else:
          return_error("The data is not in correct format")


  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()
scripttarget: 0
subtype: python3
tags:
- basescript
type: python
