args:
- description: Name of XSOAR internal list to search
  name: list_name
  required: true
- description: Server IP Address to search
  name: ip
  required: true
comment: Search for related information of the server using IP address
commonfields:
  id: SearchDataFromList
  version: -1
contentitemexportablefields:
  contentitemfields:
    fromServerVersion: ""
    itemVersion: ""
    packID: ""
    propagationLabels:
    - all
    toServerVersion: ""
dockerimage: demisto/python3:3.9.7.24076
engineinfo: {}
name: SearchDataFromList
outputs:
- contextPath: ITSM.Search
  description: Search result
  type: String
pswd: ""
runas: DBotWeakRole
runonce: false
script: |2




  from typing import Dict, Any
  import traceback

  import json
  ''' STANDALONE FUNCTION '''

  ''' COMMAND FUNCTION '''
  def search_list(data: list, ip: str):
      for row in data:
          if row['IP address'] == ip:
              server_info = {
                  "IP address": row["IP address"],
                  "Remarks QIP": row["Remarks QIP"],
                  "Qradar Logsource ID": row["Qradar Logsource ID"],
                  "Remarks QName": row["Remarks QName"],
                  "IT equipment type": row["IT equipment type"],
                  "Owner Entity": row["Owner Entity"],
                  "Status(Portfolio.Asset)": row["Status(Portfolio.Asset)"],
                  "User(Portfolio)": row["User(Portfolio)"],
                  "User name(Portfolio.User)": row["User name(Portfolio.User)"],
                  "Name": row["Name"],
                  "Last scan": row["Last scan"]
              }
              result = CommandResults(
                  outputs = server_info,
                  outputs_prefix = "ITSM.Search",
                  outputs_key_field = "Name"
                  )
              return(result)
      return(None)

  ''' MAIN FUNCTION '''

  def main():
      try:
          list_name = demisto.args().get('list_name')
          search_ip = demisto.args().get('ip')

          get_list = demisto.executeCommand("getList", {"listName": list_name})
          data = json.loads(get_list[0]['Contents'])
          return_results(search_list(data, search_ip))
      except Exception as ex:
          demisto.error(traceback.format_exc())  # print the traceback
          return_error(f'Failed to execute SearchDataFromList. Error: {str(ex)}')


  ''' ENTRY POINT '''

  if __name__ in ('__main__', '__builtin__', 'builtins'):
      main()
scripttarget: 0
subtype: python3
tags:
- basescript
type: python
